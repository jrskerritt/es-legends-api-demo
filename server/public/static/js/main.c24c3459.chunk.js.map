{"version":3,"sources":["actions/index.js","components/Search/index.js","components/Card/index.js","components/LoadingPlaceholder/index.js","components/SearchResults/index.js","components/App/index.js","reducers/index.js","configureStore.js","serviceWorker.js","index.js"],"names":["handleFetchError","error","type","fetchCards","dispatch","getState","a","nextPageUrl","loading","fetch","then","res","json","data","cards","catch","Search","useDispatch","lastSearchTerm","useSelector","state","searchTerm","useState","setSearchTerm","handleSearch","term","className","placeholder","value","onChange","target","onKeyPress","key","onClick","disabled","Card","name","rarity","subtypes","cost","power","health","set","text","imageUrl","alt","height","src","width","join","LoadingPlaceholder","data-testid","color","defaultProps","show","trackWindowScollSearchResults","trackWindowScroll","useEffect","handleScroll","document","documentElement","scrollTop","offsetHeight","window","innerHeight","length","addEventListener","removeEventListener","map","c","id","App","app","action","defaultState","Boolean","location","hostname","match","store","preloadedState","middlewareEnhancer","applyMiddleware","thunkMiddleware","createStore","rootReducer","configureStore","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.c24c3459.chunk.js","sourcesContent":["export const REQUEST_CARDS = 'REQUEST_CARDS';\r\nexport const requestCards = () => ({\r\n  type: REQUEST_CARDS\r\n});\r\n\r\nexport const RECEIVE_CARDS = 'RECEIVE_CARDS';\r\nexport const receiveCards = ({ cards, nextPageUrl }) => ({\r\n  cards,\r\n  nextPageUrl,\r\n  type: RECEIVE_CARDS\r\n});\r\n\r\nexport const HANDLE_FETCH_ERROR = 'HANDLE_FETCH_ERROR';\r\nexport const handleFetchError = error => ({\r\n  error,\r\n  type: HANDLE_FETCH_ERROR\r\n});\r\n\r\nexport const SEARCH_CARDS = 'SEARCH_CARDS';\r\nexport const searchCards = term => ({\r\n  term,\r\n  type: SEARCH_CARDS\r\n});\r\n\r\nexport const CLEAR_SEARCH = 'CLEAR_SEARCH';\r\nexport const clearSearch = () => ({\r\n  type: CLEAR_SEARCH\r\n});\r\n\r\nexport const fetchCards = () =>\r\n  async (dispatch, getState) => {\r\n    const { nextPageUrl, loading } = getState();\r\n\r\n    if (loading) {\r\n      return;\r\n    }\r\n\r\n    dispatch(requestCards());\r\n    return fetch(nextPageUrl)\r\n      .then(res => res.json())\r\n      .then(data => dispatch(receiveCards(data)))\r\n      .catch(error => dispatch(handleFetchError(error)));\r\n  };\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { searchCards, clearSearch } from '../../actions';\r\nimport './Search.css';\r\n\r\nexport function Search() {\r\n  const dispatch = useDispatch();\r\n  const lastSearchTerm = useSelector(state => state.searchTerm);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const handleSearch = () => {\r\n    if (!searchTerm) {\r\n      return;\r\n    }\r\n\r\n    dispatch(searchCards(searchTerm));\r\n    setSearchTerm('');\r\n  };\r\n\r\n  const handleClear = () => {\r\n    dispatch(clearSearch());\r\n    setSearchTerm('');\r\n  };\r\n\r\n  const onKeyPress = ({ key }) => {\r\n    if (key === 'Enter') {\r\n      handleSearch();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search pure-form\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"pure-input\"\r\n        placeholder=\"Card name\"\r\n        value={searchTerm}\r\n        onChange={({ target }) => setSearchTerm(target.value)}\r\n        onKeyPress={onKeyPress}\r\n      />\r\n      {lastSearchTerm && (\r\n        <div\r\n          className=\"search__clear-btn\"\r\n          onClick={handleClear}\r\n        >\r\n          X\r\n        </div>\r\n      )}\r\n      <button\r\n        className=\"pure-button pure-button-primary\"\r\n        type=\"button\"\r\n        disabled={false}\r\n        onClick={handleSearch}\r\n      >\r\n        Search\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport './Card.css';\r\n\r\nexport function Card({\r\n  name, rarity, type, subtypes, cost, power, health, set, text, imageUrl\r\n}) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card__image\">\r\n        <LazyLoadImage\r\n          alt={name}\r\n          height={580}\r\n          src={imageUrl}\r\n          width={350}\r\n        />\r\n      </div>\r\n      <div className=\"card__details\">\r\n        <div className=\"card__name\">{name}</div>\r\n        <div className=\"card__rarity\">{rarity}</div>\r\n        <div className=\"card__type\">\r\n          {type} &mdash;&nbsp;\r\n          <span className=\"card__stats\">\r\n            {cost} mana{health && <span className=\"card__power-health\">&nbsp;{`${power}/${health}`}</span>}\r\n          </span>\r\n          {subtypes && (\r\n            <span className=\"card__subtypes\">&nbsp;{subtypes.join(', ')}</span>\r\n          )}\r\n        </div>\r\n        <div className=\"card_set\">{set.name}</div>\r\n        <div className=\"card_text\">{text}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCard.propTypes = {\r\n  name: PropTypes.string,\r\n  rarity: PropTypes.string,\r\n  type: PropTypes.string,\r\n  subtypes: PropTypes.arrayOf(PropTypes.string),\r\n  cost: PropTypes.number,\r\n  power: PropTypes.number,\r\n  health: PropTypes.number,\r\n  set: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageUrl: PropTypes.string\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactLoading from 'react-loading';\r\nimport './LoadingPlaceholder.css';\r\n\r\nexport function LoadingPlaceholder() {\r\n  return (\r\n    <div className=\"loading-placeholder\" data-testid=\"loadingPlaceholder\">\r\n      <ReactLoading type=\"bars\" color=\"#333\" height=\"100px\" width=\"200px\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nLoadingPlaceholder.defaultProps = {\r\n  show: false\r\n};\r\n\r\nLoadingPlaceholder.propTypes = {\r\n  show: PropTypes.bool\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { trackWindowScroll } from 'react-lazy-load-image-component';\r\nimport ScrollUpButton from 'react-scroll-up-button';\r\nimport { fetchCards } from '../../actions';\r\nimport { Card } from '../Card';\r\nimport { LoadingPlaceholder } from '../LoadingPlaceholder';\r\nimport './SearchResults.css';\r\n\r\nfunction SearchResults() {\r\n  const dispatch = useDispatch();\r\n  const { cards, loading, nextPageUrl, searchTerm } = useSelector(state => ({\r\n    cards: state.cards,\r\n    loading: state.loading,\r\n    nextPageUrl: state.nextPageUrl,\r\n    searchTerm: state.searchTerm\r\n  }));\r\n\r\n  useEffect(() => {\r\n    function handleScroll() {\r\n      if (loading || !nextPageUrl) {\r\n        return;\r\n      }\r\n\r\n      const buffer = 300;\r\n      const { scrollTop, offsetHeight } = document.documentElement;\r\n      if (window.innerHeight + scrollTop > offsetHeight - buffer) {\r\n        dispatch(fetchCards());\r\n      }\r\n    };\r\n\r\n    if (!cards.length && nextPageUrl) {\r\n      dispatch(fetchCards());\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, [dispatch, cards, loading, nextPageUrl]);\r\n\r\n  return (\r\n    <div className=\"search-results\">\r\n      {searchTerm && !loading && <h2>Results for \"{searchTerm}\"</h2>}\r\n      {cards.length === 0 && !nextPageUrl && (\r\n        <div className=\"search-results__empty\">No results</div>\r\n      )}\r\n      {cards && cards.map(c => <Card key={c.id} {...c} />)}\r\n      <ScrollUpButton />\r\n      {loading && <LoadingPlaceholder />}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst trackWindowScollSearchResults = trackWindowScroll(SearchResults);\r\nexport { trackWindowScollSearchResults as SearchResults };\r\n","import React from 'react';\nimport { Search } from '../Search';\nimport { SearchResults } from '../SearchResults';\nimport './App.css';\n\nexport function App() {\n  return (\n    <div className=\"app\">\n      <h1>The Elder Scrolls: Legends</h1>\n      <h2>Search Cards</h2>\n      <Search />\n      <SearchResults />\n    </div>\n  );\n}\n","import { REQUEST_CARDS, RECEIVE_CARDS, HANDLE_FETCH_ERROR, SEARCH_CARDS, CLEAR_SEARCH } from '../actions';\r\nimport { defaultState } from '../configureStore';\r\n\r\nexport default function app(state, action) {\r\n  switch (action.type) {\r\n    case REQUEST_CARDS:\r\n      return { ...state, loading: true };\r\n    case RECEIVE_CARDS:\r\n      const { cards, nextPageUrl } = action;\r\n      return {\r\n        ...state,\r\n        nextPageUrl,\r\n        cards: [...state.cards, ...cards],\r\n        loading: false\r\n      };\r\n    case SEARCH_CARDS:\r\n      return {\r\n        ...state,\r\n        cards: [],\r\n        nextPageUrl: `${defaultState.nextPageUrl}&name=${action.term}`,\r\n        searchTerm: action.term\r\n      };\r\n    case CLEAR_SEARCH:\r\n      return {\r\n        ...state,\r\n        cards: [],\r\n        nextPageUrl: defaultState.nextPageUrl,\r\n        searchTerm: defaultState.searchTerm\r\n      };\r\n    case HANDLE_FETCH_ERROR:\r\n      return { ...state, loading: false, error: action.error };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nexport const defaultState = {\r\n  cards: [],\r\n  error: null,\r\n  loading: false,\r\n  nextPageUrl: `/api/cards?page=1`,\r\n  searchTerm: ''\r\n};\r\n\r\nexport function configureStore(preloadedState = defaultState) {\r\n  const middlewareEnhancer = applyMiddleware(thunkMiddleware);\r\n  return createStore(rootReducer, preloadedState, middlewareEnhancer);\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './components/App';\nimport { configureStore } from './configureStore';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst store = configureStore();\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}